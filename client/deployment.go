package client

import (
	"fmt"
	"log"
	"net/http"

	"github.com/liimaorg/liimactl/client/util"
)

//Deployments type is autogenerated with https://mholt.github.io/json-to-go/
type Deployments []struct {
	ID              int    `json:"id"`
	TrackingID      int    `json:"trackingId"`
	State           string `json:"state"`
	DeploymentDate  int64  `json:"deploymentDate"`
	AppServerName   string `json:"appServerName"`
	AppServerID     int    `json:"appServerId"`
	AppsWithVersion []struct {
		ApplicationName string `json:"applicationName"`
		Version         string `json:"version"`
	} `json:"appsWithVersion"`
	DeploymentParameters []interface{} `json:"deploymentParameters"`
	EnvironmentName      string        `json:"environmentName"`
	ReleaseName          string        `json:"releaseName"`
	RuntimeName          string        `json:"runtimeName"`
	RequestUser          string        `json:"requestUser"`
	ConfirmUser          string        `json:"confirmUser"`
	CancelUser           interface{}   `json:"cancelUser"`
	NodeJobs             []struct {
		ID              int    `json:"id"`
		Status          string `json:"status"`
		DeploymentState string `json:"deploymentState"`
	} `json:"nodeJobs"`
	AppsWithMvnVersion []struct {
		ApplicationName string `json:"applicationName"`
		MavenVersion    string `json:"mavenVersion"`
	} `json:"appsWithMvnVersion"`
	CancleUser interface{} `json:"cancleUser"`
}

//sort.Interface
func (slice Deployments) Len() int {
	return len(slice)
}

func (slice Deployments) Less(i, j int) bool {
	return slice[i].AppServerName < slice[j].AppServerName
}

func (slice Deployments) Swap(i, j int) {
	slice[i], slice[j] = slice[j], slice[i]
}

//CommandOptionsDeployment used for the command options (flags)
type CommandOptionsDeployment struct {
	AppName         []string `json:"appName"`
	AppServer       []string `json:"appServerName"`
	DeploymentState []string `json:"deploymentState"`
	Environment     []string `json:"environmentName"`
	OnlyLatest      bool     `json:"onlyLatest"`
}

//GetDeployment return the deployment from the client
func GetDeployment(cli *Cli, commandOptions *CommandOptionsDeployment) Deployments {

	//Build URL
	url := fmt.Sprintf("resources/./deployments?")
	url += util.BuildCommandURL(commandOptions)

	//Call rest client
	deployments := Deployments{}
	if err := cli.Client.DoRequest(http.MethodGet, url, nil, &deployments); err != nil {
		log.Fatal("Error rest call: ", err)
	}

	return deployments
}
